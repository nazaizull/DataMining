# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKG-0fMnGq_utrsxwsjWUjJkTty8gQCC
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report

# 1. Load data ke dalam DataFrame
data = {
    'NO': list(range(1, 101)),
    'NAMA': [f'NAMA {i}' for i in range(1, 101)],
    'USIA': ['23 TH', '29 TH', '20 TH', '18 TH', '34 TH', '28 TH', '36 TH', '28 TH', '39 TH', '37 TH'] * 10,
    'PARITAS': [3, 2, 1, 1, 3, 3, 4, 2, 4, 3] * 10,
    'JARAK KELAHIRAN': ['< 2 tahun', '< 2 tahun', 'anak pertama', 'anak pertama', '> 2 tahun'] * 20,
    'RIW HIPERTENSI': ['Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak'] * 20,
    'RIW PE': ['Tidak', 'PEB', 'Tidak', 'Tidak', 'Tidak'] * 20,
    'PE/NON PE': ['PE', 'PE', 'NON PE', 'NON PE', 'NON PE'] * 20
}

df = pd.DataFrame(data)

# 2. Preprocessing: Mengubah kolom USIA ke format numerik
df['USIA'] = df['USIA'].str.replace(' TH', '').astype(int)

# Encoding for categorical variables
label_encoder = LabelEncoder()
df['JARAK KELAHIRAN'] = label_encoder.fit_transform(df['JARAK KELAHIRAN'])
df['RIW HIPERTENSI'] = label_encoder.fit_transform(df['RIW HIPERTENSI'])
df['RIW PE'] = label_encoder.fit_transform(df['RIW PE'])
df['PE/NON PE'] = label_encoder.fit_transform(df['PE/NON PE'])

# 3. Train-test split
X = df[['USIA', 'PARITAS', 'JARAK KELAHIRAN', 'RIW HIPERTENSI', 'RIW PE']]
y = df['PE/NON PE']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Klasifikasi sederhana (menggunakan Decision Tree)
from sklearn.tree import DecisionTreeClassifier

clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# 5. Evaluasi model
print("Classification Report:\n", classification_report(y_test, y_pred))
conf_matrix = confusion_matrix(y_test, y_pred)

# 6. Visualisasi Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['NON PE', 'PE'], yticklabels=['NON PE', 'PE'])
plt.ylabel('True Label')
plt.xlabel('Predicted Label')
plt.title('Confusion Matrix')
plt.show()

# 7. Visualisasi Distribusi Usia
plt.figure(figsize=(8, 6))
sns.histplot(df['USIA'], bins=10, kde=True)
plt.title('Distribusi Usia')
plt.xlabel('Usia')
plt.ylabel('Frekuensi')
plt.show()

# 8. Visualisasi Paritas
plt.figure(figsize=(8, 6))
sns.countplot(x='PARITAS', data=df)
plt.title('Distribusi Paritas')
plt.xlabel('Paritas')
plt.ylabel('Jumlah')
plt.show()